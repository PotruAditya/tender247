//This is for tampermonkey
// ==UserScript==
// @name         Tender Data Extractor (with Button)
// @namespace    http://tampermonkey.net/
// @version      1.5
// @description  Extracts tender data. Press Ctrl+Shift+E or click the 'Run' button.
// @author       You
// @match        https://www.tender247.com/auth/tender/*
// @grant        GM_xmlhttpRequest
// @connect      script.google.com
// @connect      script.googleusercontent.com
// ==/UserScript==

(function() {
    'use strict';

    // --- CONFIGURATION ---
   //Might have to change the URL
    const GOOGLE_SHEET_WEB_APP_URL = 'https://script.google.com/macros/s/AKfycbx7llyqB85iPFHX9EXbaflE3hI83b2-hzzA70eI-RNmUiF10rZcXih_WWXPaTZVDdKBow/exec';

    // --- VISUAL INDICATOR FUNCTIONS ---
    function showIndicator(message, bgColor = '#333') {
        hideIndicator();
        const indicator = document.createElement('div');
        indicator.id = 'gm-indicator';
        indicator.textContent = message;
        indicator.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: ${bgColor};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            z-index: 99999;
            font-size: 16px;
            font-family: sans-serif;
            transition: top 0.3s ease;
        `;
        document.body.appendChild(indicator);
    }

    function hideIndicator() {
        const indicator = document.getElementById('gm-indicator');
        if (indicator) {
            indicator.remove();
        }
    }

    // --- HELPER FUNCTIONS ---
    function findValueByLabel(labelText) {
        const allElements = document.querySelectorAll('*');
        for (const element of allElements) {
            if (element.textContent.trim() === labelText) {
                let valueElement = element.nextElementSibling;
                if (valueElement && valueElement.tagName === 'BR') valueElement = valueElement.nextElementSibling;
                return valueElement?.textContent.trim() || 'Not Found';
            }
        }
        return 'Not Found';
    }

    function getListByHeading(headingText) {
        const items = [];
        const allHeadings = document.querySelectorAll('h4');
        for (const heading of allHeadings) {
            if (heading.textContent.includes(headingText)) {
                const listElement = heading.nextElementSibling;
                if (listElement) {
                    listElement.querySelectorAll('li').forEach(item => items.push(item.textContent.trim()));
                }
                return items;
            }
        }
        return items;
    }

    function getWebsiteLink() {
        const allSpans = document.querySelectorAll('span.font-semibold');
        for (const span of allSpans) {
            if (span.textContent.trim().includes('Website -')) {
                return span.nextElementSibling?.querySelector('a')?.href || 'Not Found';
            }
        }
        return 'Not Found';
    }

    function getUniqueId() {
        try {
            const urlParts = window.location.pathname.split('/');
            const uniqueId = urlParts[urlParts.length - 1];
            if (uniqueId && uniqueId.startsWith('T')) return uniqueId;
        } catch (e) { console.error("Could not extract ID from URL", e); }
        return 'Not Found';
    }

    // --- MAIN EXTRACTION FUNCTION ---
    function extractAndSendData() {
        showIndicator('üîé Scraping data from the page...');
        setTimeout(() => {
            try {
                const tenderData = {
                    uniqueId: getUniqueId(),
                    projectTitle: document.querySelector("span.text-\\[\\#121212\\].text-\\[20px\\]")?.textContent.trim() || 'Not Found',
                    submissionDate: findValueByLabel('Submission Date'),
                    openingDate: findValueByLabel('Opening Date'),
                    estimatedCost: findValueByLabel('Tender Estimated Cost'),
                    emd: findValueByLabel('EMD'),
                    docFees: findValueByLabel('Tender Document Fees'),
                    brief: findValueByLabel('Brief :'),
                    description: findValueByLabel('Description :'),
                    t247Id: findValueByLabel('T247 ID -'),
                    orgTenderId: findValueByLabel('Organization Tender ID -'),
                    quantity: findValueByLabel('Quantity -'),
                    msmeExemption: findValueByLabel('msme exemption -'),
                    startupExemption: findValueByLabel('startup exemption -'),
                    siteLocation: findValueByLabel('site location -'),
                    contactPerson: findValueByLabel('Contact Person -'),
                    contactAddress: findValueByLabel('Contact Address -'),
                    contactNumber: findValueByLabel('Contact Number -'),
                    contactEmail: findValueByLabel('Contact Email -'),
                    website: getWebsiteLink(),
                    maxWinCompanies: getListByHeading('Maximum Win:'),
                    probableParticipants: getListByHeading('Probable Participants:')
                };

                showIndicator('üì§ Sending data to Google Sheets...');
                GM_xmlhttpRequest({
                    method: 'POST',
                    url: GOOGLE_SHEET_WEB_APP_URL,
                    data: JSON.stringify(tenderData),
                    headers: { 'Content-Type': 'application/json' },
                    onload: function(response) {
                        try {
                            const result = JSON.parse(response.responseText);
                            if (result.result === 'success') {
                                showIndicator('‚úÖ Success! Data added to sheet.', '#28a745');
                            } else if (result.result === 'duplicate') {
                                showIndicator('üü° Duplicate: This tender already exists.', '#ffc107');
                            } else {
                                showIndicator(`‚ùå Error: ${result.message}`, '#dc3545');
                            }
                        } catch(e) {
                             showIndicator(`‚ùå Parse Error: Invalid response from server.`, '#dc3545');
                        }
                        setTimeout(hideIndicator, 4000);
                    },
                    onerror: function(response) {
                        showIndicator('‚ùå Network Error: Could not connect.', '#dc3545');
                        setTimeout(hideIndicator, 4000);
                    }
                });
            } catch (error) {
                console.error("Scraping failed:", error);
                showIndicator(`‚ùå Scraping Error: ${error.message}`, '#dc3545');
                setTimeout(hideIndicator, 5000);
            }
        }, 100);
    }

    // --- ADD A BUTTON TO THE PAGE ---
    function createRunButton() {
        const button = document.createElement('button');
        button.id = 'gm-run-button';
        button.innerHTML = 'üöÄ Run Tender Extraction';
        button.style.cssText = `
            position: fixed;
            top: 80px;
            left: 20px;
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            z-index: 9998;
            font-size: 14px;
        `;
        button.onclick = extractAndSendData;
        document.body.appendChild(button);
    }

    // --- TRIGGERS ---
    // 1. Keyboard Shortcut
    document.addEventListener('keydown', function(event) {
        if (event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'e') {
            event.preventDefault();
            extractAndSendData();
        }
    });

    // 2. Button on the page
    // Wait for the page to finish loading before adding the button
    window.addEventListener('load', createRunButton);

    console.log("Tender extractor script loaded. Press Ctrl+Shift+E or click the 'Run' button.");
})();
